// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

const truffleAssert = require('truffle-assertions');



contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

    const ownerID = accounts[0]
    const kitchenId = accounts[1]
    const distributorID = accounts[2]
    const deliveryID = accounts[3]
    const consumerID = accounts[4]
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const emptyAddress = '0x0000000000000000000000000000000000000000'


    const orderNotes = "serve hot";
    const orderPrice = web3.utils.toWei("200", 'wei');
    const deliveryCharge = web3.utils.toWei("20", 'wei');
    const orderId = 1;
    const total = web3.utils.toWei("220", 'wei');



    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Kitchen: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Delivery Person: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])


    // 1st Test
    it("Testing smart contract function placeOrder() that allows a consumer to place order", async () => {


        const supplyChain = await SupplyChain.deployed()



        supplyChain.addConsumer(consumerID);


        const customerMoneyBefore = web3.utils.fromWei(await web3.eth.getBalance(consumerID))
      
       
        const result = await supplyChain.placeOrder(orderNotes, orderPrice, deliveryCharge, { from: consumerID, value: total, gasPrice: 0 });
        const customerMoneyAfter = web3.utils.fromWei(await web3.eth.getBalance(consumerID));

        console.log("Difference ", (customerMoneyAfter - customerMoneyBefore), " ", customerMoneyBefore, customerMoneyAfter);
       
        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId)
       
        // Verify the result set
        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Idd')
        assert.equal(resultBufferOne[1], emptyAddress, 'Error: Missing or Invalid kitchenId Id')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(resultBufferOne[5], orderNotes, 'Error: Missing or Invalid orderPrice')
        assert.equal(resultBufferOne[6], orderPrice, 'Error: Missing or Invalid orderPrice')
        assert.equal(resultBufferOne[8].toString(), "0", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'OrderPlaced', (ev) => {
            //console.log("Event s ", ev,result, " Resultzzz ", result.logs[0].args.orderId," ev orderId ",ev.orderId," resutl id ",resultBufferOne[5]);
            return ev.orderId === result.logs[0].args.orderId;

        }, "Event: OrderPlaced failed");

        await supplyChain.renounceConsumer(consumerID);


    })

    // 2nd Test
    it("Testing smart contract function getOrder() that allows a kitchen to select and process order", async () => {



        const supplyChain = await SupplyChain.deployed()

        supplyChain.addKitchen(kitchenId);

        supplyChain.addConsumer(consumerID);

        const orderNotes = "serve hot";
        const orderPrice = "200";
        const deliveryCharge = "20";
        const orderId = 1;


       
        await supplyChain.placeOrder(orderNotes, orderPrice, deliveryCharge, { from: consumerID });
        // Retrieve the just now saved item from blockchain by calling function getOrderStatus()
        const result = await supplyChain.getOrder(orderId, { from: kitchenId });
        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId);


        // Verify the result set
       
        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Idd')
        assert.equal(resultBufferOne[1], kitchenId, 'Error: Missing or Invalid kitchenId Id')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(resultBufferOne[5], orderNotes, 'Error: Missing or Invalid orderPrice')
        assert.equal(resultBufferOne[6], orderPrice, 'Error: Missing or Invalid orderPrice')
        assert.equal(resultBufferOne[8].toString(), "1", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'ReceiveOrder', (ev) => {

            return ev.orderId === result.logs[0].args.orderId;

        }, "Event: ReceiveOrder failed");

        await supplyChain.renounceConsumer(consumerID);
        await supplyChain.renounceKitchen(kitchenId);


    })

    // 3rd Test
    it("Testing smart contract function kitchenPrepareOrder() that allows a kitchen to get paid to for the order", async () => {


        const supplyChain = await SupplyChain.deployed()
        console.log("Kitchen money start ", await web3.eth.getBalance(kitchenId));
        supplyChain.addKitchen(kitchenId);
        supplyChain.addConsumer(consumerID);
        supplyChain.addDistributor(distributorID);


        const kitchenMoneyBefore = await web3.eth.getBalance(kitchenId)
        console.log("Kitchen money before ", kitchenMoneyBefore);
         
        await supplyChain.placeOrder(orderNotes, orderPrice, deliveryCharge, { from: consumerID, value: total, gasPrice: 0 });
        // Retrieve the just now saved item from blockchain by calling function getOrderStatus()

        await supplyChain.getOrder(orderId, { from: kitchenId });
        const result = await supplyChain.kitchenPrepareOrder(orderId, distributorID, { from: kitchenId });
        const kitchenMoneyAfter = await web3.eth.getBalance(kitchenId)
        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId, { from: kitchenId });
        // Verify the result set
        console.log("Kitchen money after ", kitchenMoneyAfter);
        console.log("Kitchen money after ", kitchenMoneyAfter - kitchenMoneyBefore);

        // assert.equal(kitchenMoneyAfter-kitchenMoneyBefore ,200,"Error: Kitchen didn't received money");
        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Idd')
        assert.equal(resultBufferOne[1], kitchenId, 'Error: Missing or Invalid kitchenId Id')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(resultBufferOne[5], orderNotes, 'Error: Missing or Invalid Order Notes ')
        assert.equal(resultBufferOne[6], orderPrice, 'Error: Missing or Invalid orderPrice')
        assert.equal(resultBufferOne[7], deliveryCharge, 'Error: Missing or Invalid delivery charges')
        assert.equal(resultBufferOne[8].toString(), "2", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'PerpareOrder', (ev) => {
            /// console.log(ev,"----",result)
            return ev.orderId === result.logs[0].args.orderId;

        }, "Event:PerpareOrder failed");


        truffleAssert.eventEmitted(result, 'KitchenReceivedMoney', (ev) => {
            // console.log(ev,"--KitchenReceivedMoney---",result.logs[1] )
            return ev.orderId === result.logs[1].args.orderId && ev.orderPrice === result.logs[1].args.orderPrice;//

        }, "Event tested");


        truffleAssert.eventEmitted(result, 'OrderAvailabelForDelivery', (ev) => {
            //console.log(ev,"----",result.logs[2])
            return ev.orderId === result.logs[2].args.orderId;

        }, "Event tested");
        truffleAssert.eventEmitted(result, 'PreparedOrderNotified', (ev) => {

            if (ev.orderId.toString() === result.logs[3].args.orderId.toString() && ev.kitchenId === result.logs[3].args.kitchenId)
                return true;
            else
                return false;

        }, "Event: PreparedOrderNotified failed");

        await supplyChain.renounceConsumer(consumerID);
        await supplyChain.renounceKitchen(kitchenId);
        await supplyChain.renounceDistributor(distributorID);

    })

    // 4th Test
    it("Testing smart contract function orderPicked() that allows a dekivery person to pick order from kitchen ", async () => {



        const supplyChain = await SupplyChain.deployed()

        supplyChain.addKitchen(kitchenId);
        supplyChain.addConsumer(consumerID);
        supplyChain.addDistributor(distributorID);
        supplyChain.addDeliveryPerson(deliveryID)


        const orderId = 1;


        const result = await supplyChain.orderPicked(orderId, { from: deliveryID });

        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId, { from: kitchenId });
        // Verify the result set
        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Idd')
        assert.equal(resultBufferOne[3], deliveryID, 'Error: Missing or Invalid delivery charges')       
        assert.equal(resultBufferOne[8].toString(), "3", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'PickOrder', (ev) => {
            /// console.log(ev,"----",result)
            return ev.orderId === result.logs[0].args.orderId;

        }, "Event: PickOrder tested");

        await supplyChain.renounceConsumer(consumerID);
        await supplyChain.renounceKitchen(kitchenId);
        await supplyChain.renounceDistributor(distributorID);
        await supplyChain.renounceDeliveryPerson(deliveryID);

    })

    // 5th Test
    it("Testing smart contract function customerReceivedOrder() that allows customer to verify it has received order ", async () => {
        const supplyChain = await SupplyChain.deployed()

        supplyChain.addConsumer(consumerID);


        const orderId = 1;

        const result = await supplyChain.customerReceivedOrder(orderId, { from: consumerID });

        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId);
        // Verify the result set
        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Id')
        assert.equal(resultBufferOne[8].toString(), "6", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'ReceivedOrderedFood', (ev) => {
            return ev.orderId === result.logs[0].args.orderId;

        }, "Event: PickOrder tested");

        await supplyChain.renounceConsumer(consumerID);



    })

    // 6th Test
    it("Testing smart contract function orderDeliveredToCustomer() that allows a distributor to ship coffee", async () => {
        const supplyChain = await SupplyChain.deployed()

        supplyChain.addConsumer(consumerID);
        supplyChain.addDeliveryPerson(deliveryID);


        const orderId = 1;
        const deliveryPersonBefore = await web3.eth.getBalance(deliveryID)
        await supplyChain.placeOrder(orderNotes, orderPrice, deliveryCharge, { from: consumerID, value: total, gasPrice: 0 });

        await supplyChain.customerReceivedOrder(orderId, { from: consumerID });

        const result = await supplyChain.orderDeliveredToCustomer(orderId, { from: deliveryID });
        const deliveryPersonAfter = (await web3.eth.getBalance(deliveryID));
        const resultBufferOne = await supplyChain.getOrderStatus.call(orderId);

        assert.equal(resultBufferOne[0], orderId, 'Error: Invalid Order Id')
        assert.equal(resultBufferOne[8].toString(), "6", 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'OnDeliveryMoneyReceived', (ev) => {

            return ev.orderId === result.logs[0].args.orderId;

        }, "Event: OnDeliveryMoneyReceived tested");

        await supplyChain.renounceConsumer(consumerID);
        await supplyChain.renounceDeliveryPerson(deliveryID);

    })
    
});

